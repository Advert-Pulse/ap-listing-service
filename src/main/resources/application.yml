server:
  servlet:
    context-path: /listing-service
spring:
  application:
    name: ap-listing-service
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE}
    hikari:
      username: ${POSTGRES_USERNAME}
      password: ${POSTGRES_PASSWORD}
      maximum-pool-size: 100
      minimum-idle: 10
      leak-detection-threshold: 120000
      max-lifetime: 300000          # 5 minutes
      idle-timeout: 600000
      connection-timeout: 30000
      validation-timeout: 5000      # optional, to avoid long validation hangs
      connection-test-query: SELECT 1
      auto-commit: false
  jpa:
    properties:
      hibernate:
        format_sql: false
        show_sql: true
    hibernate:
      ddl-auto: update
  sql:
    init:
      mode: always
      schema-locations:
        - classpath:scripts/001_listing-schema.sql
        - classpath:scripts/002_create-task-sequence.sql
  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.ap.listing

application:
  profile: ${ACTIVE_PROFILE:local}

bloggios-auth:
  jwt:
    key-provider:
      key-alias: ${JWT_KEY_STORE_ALIAS}
      key-store-password: ${JWT_KEY_STORE_PASSWORD}
      key-store-path: ${JWT_KEY_STORE_PATH}
    token-data:
      access-token-expiry-minutes: 16
      long-access-token-expiry-minutes: 70
      refresh-token-cookie-name: ${REFRESH_TOKEN_COOKIE_NAME:bg-refresh-mgmt-token}
      refresh-token-expiry-days: 16
      is-http-only: true
      same-site: None
      secure: true
      isRemoteAddressAuthentication: false
  excluded-paths:
    jwt-paths:
      exclude-paths:
        - /test/**
        - /v1/url-api/**
        - /actuator/**
        - /oauth2/**
        - /v3/**
        - /api/v1/auth/**"
        - /v2/api-docs
        - /swagger-resources
        - /swagger-resources/**
        - /configuration/ui
        - /configuration/security
        - /swagger-ui/**
        - /webjars/**
        - /swagger-ui.html
        - /v3/api-docs
        - /v3/api-docs/**
      client-authentication-paths:
        - /user-auth/**

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_URL}
    fetch-registry: true
    register-with-eureka: true
    enabled: false
  instance:
    prefer-ip-address: true
    instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}

swagger-properties:
  group-name:
    definition: ${spring.application.name}
    scan-packages: com.ap.listing
  info:
    title: Advert Pulse - AP Listing Service
    version: v1
    description: API Documentation for ap-listing-service
    summary: The Auth Provider Application microservice, developed with Java 17 and Spring Boot, is designed to offer robust authentication and authorization services for Bloggios. This microservice ensures secure access and user management, enhancing the overall security framework of the platform.
    contact:
      name: Bloggios
      email: support@bloggios.com
      url: https://www.bloggios.com
    license:
      name: Apache 2 License
      url: https://github.com/Bloggios/auth-provider-application/blob/main/LICENSE
  servers:
    local:
      name: Local Port
      url: http://localhost:8080/listing-service
    docker:
      name: Docker Port
      url: http://localhost:7004/listing-service
    dev:
      name: Dev
      url: https://devapi.advertpulse.com/listing-service

logging:
  level:
    com.bloggios: DEBUG

feign-client:
  domain-metrics:
    name: domainMetricsClient
    url: https://domain-metrics-check.p.rapidapi.com
    host: domain-metrics-check.p.rapidapi.com
    api-key: 770cdcf629msh8ac0af84d9825b2p1ba4fdjsn3e5df144492e
  ahref:
    website-traffic:
      name: ahrefWebsiteTrafficClient
      url: https://ahrefs.scraper.tech
      api-key: 22a8b30745a0c4aa548df74c7251d6e9
  similar-web:
    analytics:
      name: similarWebAnalyticsClient
      url: https://similar-web-api.p.rapidapi.com
      host: similar-web-api.p.rapidapi.com
      api-key: 770cdcf629msh8ac0af84d9825b2p1ba4fdjsn3e5df144492e
  ap-payment-service:
    name: apPaymentServiceClient
#    url: http://localhost:8082/payment-service
    url: https://devapi.advertpulse.com/payment-service
  google-service:
    name: googleClient
    url: https://oauth2.googleapis.com
    client-id: 898797817545-3lnhm1esudbkd5lcvlibvvdb73t7n866.apps.googleusercontent.com
    client-secret: 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
  ipClient:
    name: ipClientFeign
    url: http://ip-api.com/json

ap:
  platform-fee:
    content-placement: 10
    writing-placement: 10
    link-insertion: 20
  reserved-balance:
    hidden-url: 100

scheduler:
  fetchWebsite:
    limit: 4
    multiplier: 4
  autoRejectTask:
    scheduleAfter: 4

website-analyser:
  mozDA: 10
  domainRating: 10

kafka:
  producer:
    topics:
      buy-content-placement: ${application.profile}.listing-service.buy-content-placement